package com.infoshareacademy.service.pdfservice;

import com.infoshareacademy.model.databaseinputs.DetailedStatisticsModel;
import com.infoshareacademy.model.databaseinputs.RushHourModel;
import com.infoshareacademy.model.databaseinputs.StatisticsStore;
import com.infoshareacademy.model.databaseinputs.SumDetailedStaticsModel;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class PdfGenerator {
    
    StatisticsStore statisticsStore;
    

    public PdfGenerator(StatisticsStore statisticsStore) {
        this.statisticsStore = statisticsStore;
    }

    private static String FILE = "Report.pdf";

    private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 30,
            Font.BOLD);
    private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.NORMAL, BaseColor.RED);
    private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
            Font.BOLD);
    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.BOLD);

    public void generatePDF() {
        try {
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(FILE));
            document.open();
            addMetaData(document);
            addTitlePage(document);
            addContent(document);
            document.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // iText allows to add metadata to the PDF which can be viewed in your Adobe
    // Reader
    // under File -> Properties
    private static void addMetaData(Document document) {
        document.addTitle("Raport");
        document.addSubject(LocalDate.now().toString());
        document.addKeywords("Java, PDF, iText");
        document.addAuthor("Zakupy app system");
        document.addCreator("GangSwierzakow");
    }

    private static void addTitlePage(Document document)
            throws DocumentException {
        Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, 10);
        // Lets write a big header
        preface.add(new Paragraph("Report for application", catFont));
        addEmptyLine(preface, 1);
        preface.add(new Paragraph("EasyAllegroShoping", catFont));

        addEmptyLine(preface, 5);
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph(
                "Generated on " + LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE) + " by EasyAllegroShopingReportingSystema", //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                smallBold));

        document.add(preface);
        // Start a new page
        document.newPage();
    }

    private void addContent(Document document) throws DocumentException, IOException {
        Anchor anchor = new Anchor("Users activity from last month", catFont);
        Chapter catPart = new Chapter(new Paragraph(anchor), 1);

        Paragraph subPara = new Paragraph("a number of entries to the individual features", subFont);
        addEmptyLine(subPara, 1);

        Section subCatPart = catPart.addSection(subPara);

        subCatPart.add(new Paragraph("D - day"));
        subCatPart.add(new Paragraph("F1 - feature1"));
        subCatPart.add(new Paragraph("F2 - feature2"));
        subCatPart.add(new Paragraph("F3 - feature3"));
        subCatPart.add(new Paragraph("F4 - feature4"));
        subCatPart.add(new Paragraph("M - menu"));

        createTable(subCatPart);

        addEmptyLine(subPara, 1);

        document.newPage();

        subPara = new Paragraph("charts", subFont);
        addEmptyLine(subPara, 1);

        subCatPart = catPart.addSection(subPara);

        Image barChart = Image.getInstance("BarChart.png");
        barChart.scalePercent(60);
        barChart.setAlignment(Image.ALIGN_CENTER);
        subCatPart.add(barChart);

        Image lineChart = Image.getInstance("LineChart.png");
        lineChart.scalePercent(60);
        lineChart.setAlignment(Image.ALIGN_CENTER);
        subCatPart.add(lineChart);

        addEmptyLine(subPara, 5);

        document.newPage();
        subCatPart = catPart.addSection(new Paragraph("a number of user visits at each hour", subFont));


        createTableForRushHours(subCatPart);

        Image lineChart1 = Image.getInstance("LineChart1.png");
        lineChart1.scalePercent(60);
        lineChart1.setAlignment(Image.ALIGN_CENTER);
        subCatPart.add(lineChart1);

        subCatPart.add(new Paragraph("Paragraph 1"));
        subCatPart.add(new Paragraph("Paragraph 2"));
        subCatPart.add(new Paragraph("Paragraph 3"));

        // add a list
        createList(subCatPart);
        Paragraph paragraph = new Paragraph();
        addEmptyLine(paragraph, 5);
        subCatPart.add(paragraph);


        // now add all this to the document
        document.add(catPart);

        // Next section
        anchor = new Anchor("Wybierane funkcjonalnosci", catFont);
        anchor.setName("Wybierane funkcjonalnosci");

        // Second parameter is the number of the chapter
        catPart = new Chapter(new Paragraph(anchor), 1);

        subPara = new Paragraph("Subcategory", subFont);
        subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("This is a very important message"));

        // now add all this to the document
        document.add(catPart);

    }

    private void createTableForRushHours(Section section) throws BadElementException {
        PdfPTable table = new PdfPTable(24);

        Integer i = 0;
        for (RushHourModel r :
                statisticsStore.getLastMonthUserActivityIntervalStat()) {
            PdfPCell c1 = new PdfPCell(new Phrase(i.toString()));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(c1);
            i++;
        }

        table.setHeaderRows(1);

        for (RushHourModel r:
                statisticsStore.getLastMonthUserActivityIntervalStat()) {
            table.addCell(r.getQuantity().toString());
        }

        section.add(table);

    }

    private void createTable(Section subCatPart)
            throws BadElementException {
        PdfPTable table = new PdfPTable(6);

        // t.setBorderColor(BaseColor.GRAY);
        // t.setPadding(4);
        // t.setSpacing(4);
        // t.setBorderWidth(1);

        PdfPCell c1 = new PdfPCell(new Phrase("D"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("F1"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("F2"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("F3"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("F4"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("M"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        table.setHeaderRows(1);

        statisticsStore.getLastMonthUserActivityInIndividualFeature().forEach(d -> putLastMonthDetailsToTable(table, d));
        putSumDetailedStatisticsToTable(table, statisticsStore.getLastMonthSumUserActivityInIndividualFeature());

        subCatPart.add(table);

    }

    private void putLastMonthDetailsToTable(PdfPTable table, DetailedStatisticsModel details) {
        table.addCell(details.getDate());
        table.addCell(details.getFeature1Quantity().toString());
        table.addCell(details.getFeature2Quantity().toString());
        table.addCell(details.getFeature3Quantity().toString());
        table.addCell(details.getFeature4Quantity().toString());
        table.addCell(details.getVisits().toString());
    }

    private void putSumDetailedStatisticsToTable(PdfPTable table, SumDetailedStaticsModel details) {
        table.addCell("Overview");
        table.addCell(String.valueOf(details.getFeature1Sum()));
        table.addCell(String.valueOf(details.getFeature2Sum()));
        table.addCell(String.valueOf(details.getFeature3Sum()));
        table.addCell(String.valueOf(details.getFeature4Sum()));
        table.addCell(String.valueOf(details.getVisitSum()));

    }

    private static void createList(Section subCatPart) {
        List list = new List(true, false, 10);
        list.add(new ListItem("First point"));
        list.add(new ListItem("Second point"));
        list.add(new ListItem("Third point"));
        subCatPart.add(list);
    }

    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }

}
